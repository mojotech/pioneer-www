extends layout

block header
  include templates

block content
  .page-container
    .meet-pioneer
      .top-nav
        img(src="img/band.svg").logo
        ul
          li.nav-link
            a(href="#") ABOUT
          li.nav-link
            a(href="http://github.com/mojotech/pioneer/docs") DOCS
          li.nav-link
            a(href="http://github.com/mojotech/pioneer") GITHUB
          li.nav-link
            a(href="#") GETTING STARTED
      p.headline MEET PIONEER

      .contain
        p.subheadline Pioneer is an easy to understand javascript DSL to interact with your app via a real browser and test its state against expectations.

      .half-fill
      .container.panes
        .browser-top
          ul.buttons
            li.button
            li.button
            li.button
        .top.left
        .top.middle
          #movie-theatre
        .top.right
        .bottom.left
        .cl

    .what
      .contain
        .what-block
          img(src="img/wagon.svg").blue-wagon
          h3.headline WHAT?
          p.description.
            Pioneer allows you to maintain a readable code base
            for both programmers and product owners.
            It makes writing and debugging integration tests simpler,
            saving you time and frustration. Pioneer is stack agnostic,
            you can use it against your jquery powered SPA all the way up
            to a complex Ember/Angular/Backbone app.

    .installing
      .contain
        h3 Installing

        pre
          | npm i pioneer --save

    .pieces
      .contain
        h3 The Pieces
        p Pioneer is composed of four pieces to keep your code as DRY as possible while maintaining layers of readability

    .components
      .contain
        ul
          li
            img.left.component-mark(src="img/cucumber.png")
            .left
              h6 Cucumber
              p
                | Your test outlines are written in English like Gherkin that make reading and writing how the app should function simple. Gherkin is the language that Cucumber understands. It is a *Business Readable*, *Domain Specific Language* that lets you describe software’s behavior without detailing how that behavior is implemented. Gherkin serves two purposes — documentation and automated tests. The third is a bonus feature — when it yells in red it’s talking to you, telling you what code you should write.
            .cl
          li
            img.left.component-mark(src="img/steps.png")
            .left
              h6 Step definitions
              p
                | Step definitions contain the assertions about the state of your webpage. These step definitions are called from the cucumber steps. The steps compose multiple widgets and widget interactions to drive the UI into a state. Then you make assertions based on the state of the DOM.
            .cl
          li
            img.left.component-mark(src="img/widgets.png")
            .left
              h6 Widgets
              p
                | Widgets are wrappers around your DOM. They are reusable components that abstract the specifics of interacting with your app into isolated components. That can be quickly changed in your app when the markup or interaction specifics changes.
            .cl
          li
            img.left.component-mark(src="img/driver.png")
            .left
              h6 WebDriver / WebElements
              p
                | WebElements are the raw DOM elements on the page. They are what widgets wrap in a clean API for you to interact with.
            .cl
